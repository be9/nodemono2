module(
    name = "nodemono2",
)

bazel_dep(name = "rules_nodejs", version = "6.0.5")
bazel_dep(name = "aspect_rules_js", version = "1.40.1")
bazel_dep(name = "aspect_rules_ts", version = "2.2.0")
bazel_dep(name = "aspect_bazel_lib", version = "2.7.0")
bazel_dep(name = "rules_go", version = "0.46.0")
bazel_dep(name = "gazelle", version = "0.35.0")
bazel_dep(name = "rules_proto", version = "6.0.0-rc2")
bazel_dep(name = "protobuf", version = "23.1", repo_name = "com_google_protobuf")
bazel_dep(name = "rules_apko", version = "1.2.3")
bazel_dep(name = "rules_oci", version = "1.7.5")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
use_repo(node, "nodejs_toolchains")

# 20.12.0 is not released yet https://github.com/bazelbuild/rules_nodejs/commit/6199ad0804cb9cf54deb73f761e0ec4f18347ccb
node.toolchain(node_version = "20.11.1")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")

##########################################################################################################

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "com_github_jhump_protoreflect",
    "org_golang_google_api",
)
go_deps.gazelle_override(
    directives = [
        "gazelle:proto disable",
    ],
    path = "google.golang.org/protobuf",
)

##########################################################################################################

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_node",
    digest = "sha256:6d0f50681aab846e8c005ee864324ef2cbea464fd10a09e3b02876cdc0696543",
    image = "gcr.io/distroless/nodejs20-debian12",
    platforms = [
        "linux/amd64",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)
use_repo(oci, "distroless_node")
oci.pull(
    name = "debian_node",
    image = "node:20-slim",
    platforms = [
        "linux/amd64",
    ],
)
use_repo(oci, "debian_node")
oci.pull(
    name = "alpine_node",
    digest = "sha256:7a91aa397f2e2dfbfcdad2e2d72599f374e0b0172be1d86eeb73f1d33f36a4b2",
    image = "node",  # "node:20-alpine"
    platforms = [
        "linux/amd64",
        "linux/arm/v6",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)
use_repo(oci, "alpine_node")

#############################

toolchain = use_extension("@rules_apko//apko:extensions.bzl", "apko")
toolchain.toolchain(apko_version = "v0.13.1")
use_repo(toolchain, "apko_toolchains")

register_toolchains("@apko_toolchains//:all")

# locks
apk = use_extension(
    "@rules_apko//apko:extensions.bzl",
    "apko",
    dev_dependency = True,
)
apk.translate_lock(
    name = "alpine_with_bash_lock",
    lock = "//:alpine_with_bash.lock.json",
)
use_repo(apk, "alpine_with_bash_lock")
